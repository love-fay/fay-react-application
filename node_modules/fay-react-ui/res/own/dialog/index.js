import _objectSpread from "@babel/runtime-corejs2/helpers/objectSpread";
import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";
import _assertThisInitialized from "@babel/runtime-corejs2/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime-corejs2/helpers/defineProperty";
import React, { Component } from 'react';
import './style/index.less';
import Scroll from '../customScroll';
import classnames from 'classnames';
import ReactDom from 'react-dom';
import PropTypes from "prop-types";
import Icon from 'rjd/icon';

var Dialog =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Dialog, _Component);

  function Dialog(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "currentX", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "currentY", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "move", false);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMouseDown", function (e) {
      _this.currentX = e.clientX;
      _this.currentY = e.clientY;
      _this.move = true;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMouseMove", function (e) {
      if (_this.move) {
        var dialogTop = _this.dialog.current.offsetTop;
        var dialogLeft = _this.dialog.current.offsetLeft;
        var moveX = e.clientX - _this.currentX;
        var moveY = e.clientY - _this.currentY;
        var top = dialogTop + moveY;
        var left = dialogLeft + moveX;
        _this.currentX = e.clientX;
        _this.currentY = e.clientY;

        _this.setState({
          top: top,
          left: left,
          bottom: 'auto',
          right: 'auto'
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMouseUp", function () {
      _this.move = false;
    });

    var _props$width = props.width,
        width = _props$width === void 0 ? 500 : _props$width,
        _props$height = props.height,
        height = _props$height === void 0 ? 500 : _props$height,
        _props$style = props.style,
        style = _props$style === void 0 ? {} : _props$style,
        maxHeight = props.maxHeight;
    _this.state = {
      width: width,
      height: maxHeight ? 'auto' : height,
      style: style
    };
    _this.dialog = React.createRef();
    return _this;
  }

  var _proto = Dialog.prototype;

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _nextProps$width = nextProps.width,
        width = _nextProps$width === void 0 ? 500 : _nextProps$width,
        _nextProps$height = nextProps.height,
        height = _nextProps$height === void 0 ? 500 : _nextProps$height,
        maxHeight = nextProps.maxHeight;
    this.setState({
      width: width,
      height: maxHeight ? 'auto' : height
    });
  };

  _proto.componentDidMount = function componentDidMount() {
    document.addEventListener('mousemove', this.onMouseMove, false);
    document.addEventListener('mouseup', this.onMouseUp, false);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    document.removeEventListener('mousemove', this.onMouseMove, false);
    document.addEventListener('mouseup', this.onMouseUp, false);
  };

  _proto.render = function render() {
    var stylePrefix = 'rj-dialog';
    var _this$state = this.state,
        width = _this$state.width,
        height = _this$state.height,
        style = _this$state.style,
        top = _this$state.top,
        left = _this$state.left,
        bottom = _this$state.bottom,
        right = _this$state.right;
    var _this$props = this.props,
        visible = _this$props.visible,
        title = _this$props.title,
        onCancel = _this$props.onCancel,
        children = _this$props.children,
        className = _this$props.className,
        mod = _this$props.mod,
        maxHeight = _this$props.maxHeight;
    var display = visible ? 'block' : 'none';
    var body;
    var dialogHeight;

    if (mod === 'scrollInline') {
      body = React.createElement(Scroll, {
        style: {
          width: '100%',
          height: '100%',
          maxHeight: maxHeight,
          padding: '10px 0 0 10px'
        },
        maxHeight: maxHeight
      }, children);
      dialogHeight = height;
    } else {
      body = children;
      dialogHeight = 'auto';
    }

    var newStyle = _objectSpread({}, style, {
      width: width,
      height: dialogHeight,
      display: display
    });

    newStyle = top && left && bottom && right ? _objectSpread({}, newStyle, {
      top: top,
      left: left,
      bottom: bottom,
      right: right
    }) : newStyle;
    return ReactDom.createPortal(React.createElement("div", {
      className: classnames(stylePrefix, className),
      style: newStyle,
      ref: this.dialog
    }, React.createElement("div", {
      className: stylePrefix + '-header',
      onMouseDown: this.onMouseDown,
      onMouseUp: this.onMouseUp
    }, React.createElement("div", {
      className: stylePrefix + '-header-title'
    }, title), React.createElement("div", {
      className: stylePrefix + '-header-close'
    }, React.createElement(Icon, {
      type: "close",
      onClick: onCancel
    }))), React.createElement("div", {
      className: stylePrefix + '-body'
    }, body)), document.body);
  };

  return Dialog;
}(Component);

export { Dialog as default };
Dialog.propTypes = {
  visible: PropTypes.bool.isRequired,
  title: PropTypes.any,
  onCancel: PropTypes.func,
  children: PropTypes.any,
  className: PropTypes.string,
  style: PropTypes.object,
  width: PropTypes.number,
  height: PropTypes.number,
  mod: PropTypes.string,
  maxHeight: PropTypes.number
};
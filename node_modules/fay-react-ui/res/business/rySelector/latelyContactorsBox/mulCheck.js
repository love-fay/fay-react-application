import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";

/**
 * Created by Administrator on 2018/8/13.
 */
import React, { Component } from "react";
import PropTypes from "prop-types";
import Checkbox from "../../../../checkbox";
var stylePrefix = 'rj-rySelector-latelyContactorsBox';
var CheckboxGroup = Checkbox.Group;

function onCheckAllChange(e, latelyContactors) {
  this.setState({
    indeterminate: false,
    checkAll: e.target.checked
  });
  var selectedRys = this.props.selectedRys;

  if (e.target.checked) {
    var newRys = latelyContactors.filter(function (ryItem) {
      return selectedRys.findIndex(function (selectedRyItem) {
        return selectedRyItem.username === ryItem.username;
      }) < 0;
    });
    this.props.onChange(selectedRys.concat(newRys));
  } else {
    var filter = selectedRys.filter(function (selectedRyItem) {
      return latelyContactors.findIndex(function (ryItem) {
        return ryItem.username === selectedRyItem.username;
      }) < 0;
    });
    this.props.onChange(filter);
  }
}

function onChangeGroup(checkedList, latelyContactors) {
  this.setState({
    indeterminate: !!checkedList.length && checkedList.length < latelyContactors.length,
    checkAll: checkedList.length === latelyContactors.length
  });
  var selectedRys = this.props.selectedRys;
  var newCheckeds = checkedList.filter(function (checkedListItem) {
    return selectedRys.filter(function (selectedRyItem) {
      return selectedRyItem.username == checkedListItem;
    }).length == 0;
  });
  var addRys = latelyContactors.filter(function (item) {
    return newCheckeds.includes(item.username);
  });

  if (addRys.length > 0) {
    var newRys = addRys.filter(function (ryItem) {
      return selectedRys.findIndex(function (selectedRyItem) {
        return selectedRyItem.username === ryItem.username;
      }) < 0;
    });
    this.props.onChange(selectedRys.concat(newRys));
  }

  var cancelRys = latelyContactors.filter(function (item) {
    return selectedRys.filter(function (selectedRyItem) {
      return selectedRyItem.username == item.username;
    }).length > 0;
  }).filter(function (item) {
    return !checkedList.includes(item.username);
  });

  if (cancelRys.length > 0) {
    var filter = selectedRys.filter(function (selectedRyItem) {
      return cancelRys.findIndex(function (ryItem) {
        return ryItem.username === selectedRyItem.username;
      }) < 0;
    });
    this.props.onChange(filter);
  }
}

function iniState(_ref) {
  var selectedRys = _ref.selectedRys;
  this.latelyContactors = JSON.parse(localStorage.getItem("latelyContactors"));

  if (this.latelyContactors) {
    var length = this.latelyContactors.filter(function (ryItem) {
      return selectedRys.findIndex(function (selectedRyItem) {
        return selectedRyItem.username === ryItem.username;
      }) < 0;
    }).length;

    if (length === this.latelyContactors.length) {
      this.setState({
        checkAll: false,
        indeterminate: false
      });
    } else if (length > 0) {
      this.setState({
        checkAll: false,
        indeterminate: true
      });
    } else {
      this.setState({
        checkAll: true
      });
    }
  }
}

var CheckboxDiv = function CheckboxDiv(_ref2) {
  var value = _ref2.value,
      label = _ref2.label;
  return React.createElement("div", {
    className: stylePrefix + '-checkbox'
  }, React.createElement(Checkbox, {
    value: value
  }, React.createElement("span", {
    className: "textOverflow",
    title: label
  }, label)));
};

var MulCheck =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(MulCheck, _Component);

  function MulCheck(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.state = {
      indeterminate: false,
      checkAll: false
    };
    _this.latelyContactors = undefined;
    return _this;
  }

  var _proto = MulCheck.prototype;

  _proto.componentWillMount = function componentWillMount() {
    iniState.call(this, this.props);
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    iniState.call(this, nextProps);
  };

  _proto.render = function render() {
    var _this2 = this;

    var selectedRys = this.props.selectedRys;
    var options = [];
    var checkedValues = [];

    if (this.latelyContactors) {
      options = this.latelyContactors.map(function (item) {
        if (selectedRys.filter(function (selectedRyItem) {
          return selectedRyItem.username == item.username;
        }).length > 0) {
          checkedValues.push(item.username);
        }

        return {
          label: item.nickname,
          value: item.username
        };
      });
    }

    return React.createElement("div", null, React.createElement("div", null, React.createElement(Checkbox, {
      indeterminate: this.state.indeterminate,
      onChange: function onChange(e) {
        return onCheckAllChange.call(_this2, e, _this2.latelyContactors);
      },
      checked: this.state.checkAll
    }, React.createElement("span", {
      style: {
        fontWeight: "bold"
      }
    }, "\u6700\u8FD1\u4F7F\u7528"))), React.createElement("div", null, React.createElement(CheckboxGroup, {
      value: checkedValues,
      onChange: function onChange(checkedList) {
        return onChangeGroup.call(_this2, checkedList, _this2.latelyContactors);
      }
    }, options.map(function (item) {
      return React.createElement(CheckboxDiv, {
        key: item.value,
        value: item.value,
        label: item.label
      });
    }))));
  };

  return MulCheck;
}(Component);

MulCheck.propTypes = {
  selectedRys: PropTypes.array.isRequired,
  onChange: PropTypes.func.isRequired
};
export default MulCheck;
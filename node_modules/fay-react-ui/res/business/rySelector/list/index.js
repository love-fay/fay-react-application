import _extends from "@babel/runtime-corejs2/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";
import _assertThisInitialized from "@babel/runtime-corejs2/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime-corejs2/helpers/defineProperty";

/**
 * Created by Administrator on 2018/5/22.
 */
import React, { Component } from "react";
import List from "../../../../list";
import classnames from "classnames";
import "./style/index.less";

var ListWithKeyEvent =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(ListWithKeyEvent, _Component);

  function ListWithKeyEvent(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "keyupHandler", function (e) {
      e.stopImmediatePropagation();

      if (e.keyCode == 40) {
        //向下方向键
        var selectedIndex = _this.state.selectedIndex;

        if (selectedIndex < _this.props.dataSource.length) {
          selectedIndex++;

          _this.setState({
            selectedIndex: selectedIndex
          });
        }
      } else if (e.keyCode == 38) {
        //向上方向键
        var _selectedIndex = _this.state.selectedIndex;

        if (_selectedIndex > 1) {
          _selectedIndex--;

          _this.setState({
            selectedIndex: _selectedIndex
          });
        }
      } else if (e.keyCode == 13) {
        //回车
        var _selectedIndex2 = _this.state.selectedIndex;

        if (_selectedIndex2 > 0) {
          _this.props.onEnterPress(_this.props.dataSource[_selectedIndex2 - 1]);
        }
      }
    });

    _this.state = {
      selectedIndex: 0
    };
    return _this;
  }

  var _proto = ListWithKeyEvent.prototype;

  _proto.componentDidMount = function componentDidMount() {
    document.body.addEventListener("keyup", this.keyupHandler);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    document.body.removeEventListener("keyup", this.keyupHandler);
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (this.props.dataSource.length != nextProps.dataSource.length) {
      this.setState({
        selectedIndex: 0
      });
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    // let newProps = Object.assign({}, this.props);
    // delete newProps.onEnterPress;
    var _this$props = this.props,
        onEnterPress = _this$props.onEnterPress,
        _renderItem = _this$props.renderItem,
        listProps = _objectWithoutPropertiesLoose(_this$props, ["onEnterPress", "renderItem"]);

    var i = 0;
    return React.createElement(List, _extends({}, listProps, {
      renderItem: function renderItem(item) {
        i++;
        return React.createElement("div", {
          className: classnames({
            'rj-list-onSelect': _this2.state.selectedIndex == i
          })
        }, _renderItem(item));
      }
    }));
  };

  return ListWithKeyEvent;
}(Component);

export { ListWithKeyEvent as default };
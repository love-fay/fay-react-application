import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";
import _assertThisInitialized from "@babel/runtime-corejs2/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime-corejs2/helpers/defineProperty";

/**
 * Created by Administrator on 2018/5/21.
 */
import React, { Component } from "react";
import PropTypes from "prop-types";
var stylePrefix = 'rj-rySelector-queryInput';

function onChangeSearch(e, onChange) {
  var _this = this;

  this.setState({
    inputValue: e.target.value,
    inputTime: new Date()
  });
  setTimeout(function () {
    var now = new Date();

    if (now - _this.state.inputTime > 490) {
      onChange && onChange(_this.state.inputValue);
    }
  }, 500);
}

var QueryInput =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(QueryInput, _Component);

  function QueryInput(props) {
    var _this2;

    _this2 = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "keyupHandler", function (e) {
      if (e.keyCode == 8) {
        _this2.props.onBackspace && _this2.props.onBackspace();
      }
    });

    _this2.state = {
      inputValue: "",
      inputTime: new Date()
    };
    return _this2;
  }

  var _proto = QueryInput.prototype;

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.value != this.props.value) {
      this.setState({
        inputValue: nextProps.value
      });
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    document.querySelector('.' + stylePrefix + "-input").size = document.querySelector('.' + stylePrefix + "-input").value.length == 0 ? 1 : 4;
  };

  _proto.render = function render() {
    var _this3 = this;

    return React.createElement("div", {
      className: stylePrefix
    }, React.createElement("input", {
      className: stylePrefix + "-input",
      value: this.state.inputValue,
      onChange: function onChange(e) {
        return onChangeSearch.call(_this3, e, _this3.props.onChange);
      },
      onKeyUp: this.keyupHandler,
      size: "1"
    }));
  };

  return QueryInput;
}(Component);

export { QueryInput as default };
QueryInput.prototypes = {
  value: PropTypes.string.isRequired,
  onChange: PropTypes.func,
  onBackspace: PropTypes.func
};
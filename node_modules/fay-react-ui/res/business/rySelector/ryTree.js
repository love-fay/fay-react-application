import _objectSpread from "@babel/runtime-corejs2/helpers/objectSpread";
import _Promise from "@babel/runtime-corejs2/core-js/promise";
import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";
import _assertThisInitialized from "@babel/runtime-corejs2/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime-corejs2/helpers/defineProperty";
import _getIterator from "@babel/runtime-corejs2/core-js/get-iterator";

/**
 * 人员树
 * Created by Administrator on 2018/5/21.
 */
import React, { Component } from "react";
import PropTypes from 'prop-types';
import Tree from "../../../tree";
import message from '../../../message';
import Spin from '../../../spin';
import { userSelect } from './api';
import { loginUser } from "rj-lib/user";
var TreeNode = Tree.TreeNode;
var userInfo = loginUser();

function onCheckTree(nextCheckedKeys, e, selectedRys) {
  var _this = this;

  var changeNodes = [];

  switch (e.node.props['data-ref'].type) {
    case 'zjlxr':
      changeNodes = e.node.props.children;
      break;

    case 'court':
      for (var _iterator = e.node.props.children.values(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var department = _ref;
        changeNodes = changeNodes.concat(department.props.children);
      }

      break;

    case 'department':
      changeNodes = e.node.props.children;
      break;

    case 'contactor':
      changeNodes.push(e.node);
      break;

    case 'person':
      changeNodes.push(e.node);
      break;
  }

  var selectedRysChange = [];
  changeNodes.map(function (item) {
    var filterData = selectedRysChange.filter(function (resItem) {
      return resItem.username == item.props['data-ref'].username;
    }); //去除重复

    if (filterData.length == 0) {
      var fyfjm, orgName, bmbs, departmentName;

      if (item.props['data-ref'].type === 'contactor') {
        fyfjm = item.props['data-ref'].fyfjm;
        orgName = item.props['data-ref'].orgName;
        bmbs = item.props['data-ref'].bmbs;
        departmentName = item.props['data-ref'].departmentName;
      } else if (item.props['data-ref'].type === 'person') {
        if (_this.props.userRange == 1) {
          fyfjm = item.props['data-ref'].parentNode['data-ref'].parentNode['data-ref'].fyfjm;
          orgName = item.props['data-ref'].parentNode['data-ref'].parentNode['data-ref'].name;
          bmbs = item.props['data-ref'].parentNode['data-ref'].bmbs;
          departmentName = item.props['data-ref'].parentNode['data-ref'].name;
        } else if (_this.props.userRange == 3) {
          fyfjm = userInfo.fyfjm;
          orgName = userInfo.fymc;
          bmbs = item.props['data-ref'].parentNode['data-ref'].bmbs;
          departmentName = item.props['data-ref'].parentNode['data-ref'].name;
        }
      }

      selectedRysChange.push({
        id: item.props['data-ref'].id,
        username: item.props['data-ref'].username,
        nickname: item.props['data-ref'].nickname,
        rybs: item.props['data-ref'].rybs,
        fyfjm: fyfjm,
        orgName: orgName,
        bmbs: bmbs,
        departmentName: departmentName
      });
    }
  });

  if (e.checked) {
    var _loop = function _loop() {
      if (_isArray2) {
        if (_i2 >= _iterator2.length) return "break";
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) return "break";
        _ref2 = _i2.value;
      }

      var item = _ref2;

      if (selectedRys.findIndex(function (selectedRy) {
        return selectedRy.username === item.username;
      }) < 0) {
        selectedRys.push(item);
      }
    };

    for (var _iterator2 = selectedRysChange.values(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
      var _ref2;

      var _ret = _loop();

      if (_ret === "break") break;
    }
  } else {
    selectedRys = selectedRys.filter(function (selectedRy) {
      return selectedRysChange.findIndex(function (item) {
        return item.username === selectedRy.username;
      }) < 0;
    });
  }

  this.props.onChange(selectedRys);
}

function onSelectTree(selectedKeys, e) {
  if (!this.props.checkable && e.node.props['data-ref'].type === 'person' || e.node.props['data-ref'].type === 'contactor') {
    var selectedRys = [];
    var fyfjm, orgName, bmbs, departmentName;
    var item = e.node;

    if (item.props['data-ref'].type === 'contactor') {
      fyfjm = item.props['data-ref'].fyfjm;
      orgName = item.props['data-ref'].orgName;
      bmbs = item.props['data-ref'].bmbs;
      departmentName = item.props['data-ref'].departmentName;
    } else if (item.props['data-ref'].type === 'person') {
      if (this.props.userRange == 1) {
        fyfjm = item.props['data-ref'].parentNode['data-ref'].parentNode['data-ref'].fyfjm;
        orgName = item.props['data-ref'].parentNode['data-ref'].parentNode['data-ref'].name;
        bmbs = item.props['data-ref'].parentNode['data-ref'].bmbs;
        departmentName = item.props['data-ref'].parentNode['data-ref'].name;
      } else if (this.props.userRange == 3) {
        fyfjm = userInfo.fyfjm;
        orgName = userInfo.fymc;
        bmbs = item.props['data-ref'].parentNode['data-ref'].bmbs;
        departmentName = item.props['data-ref'].parentNode['data-ref'].name;
      }
    }

    selectedRys.push({
      id: item.props['data-ref'].id,
      username: item.props['data-ref'].username,
      nickname: item.props['data-ref'].nickname,
      rybs: item.props['data-ref'].rybs,
      fyfjm: fyfjm,
      orgName: orgName,
      bmbs: bmbs,
      departmentName: departmentName
    });
    this.props.onChange(selectedRys);
  }
}

;

function cacCheckedKeys(checkedKeys, treeData, userRange) {
  var zjlxrData = treeData[0],
      otherData = treeData.slice(1);
  var res = zjlxrData.children.filter(function (zjlxrItem) {
    return checkedKeys.includes(zjlxrItem.key.substring(10));
  });

  if (userRange === 1 || userRange === 2) {
    for (var _iterator3 = otherData.values(), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var jgItem = _ref3;

      for (var _iterator4 = jgItem.children.values(), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var department = _ref4;
        var filter = department.children.filter(function (personItem) {
          return checkedKeys.includes(personItem.key);
        });
        if (filter.length > 0) res = res.concat(filter);
      }
    }
  } else {
    for (var _iterator5 = otherData.values(), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var _department = _ref5;

      var _filter = _department.children.filter(function (personItem) {
        return checkedKeys.includes(personItem.key);
      });

      if (_filter.length > 0) res = res.concat(_filter);
    }
  }

  return res.map(function (item) {
    return item.key;
  });
}

var RyTree =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(RyTree, _Component);

  function RyTree(props) {
    var _this2;

    _this2 = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "onLoadData", function (treeNode) {
      return new _Promise(function (resolve) {
        _this2.findChildrens(treeNode);

        resolve();
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "findParents", function () {
      var treeData = _this2.state.treeData;

      if (_this2.props.userRange == 1 || _this2.props.userRange == 2) {
        _this2.setState({
          loading: true
        });

        userSelect.findOrgs(_this2.props.userRange).then(function (res) {
          return res.json();
        }).then(function (res) {
          if (res.code === "success" && res.data) {
            res.data.forEach(function (item) {
              treeData.push(_objectSpread({
                key: item.id,
                type: 'court',
                parentNode: null,
                children: []
              }, item));
            });

            _this2.setState({
              treeData: treeData,
              loading: false
            });
          }
        });
      } else {
        _this2.setState({
          loading: true
        });

        userSelect.findOrgByCurrentUser().then(function (res) {
          return res.json();
        }).then(function (res) {
          if (res.code === "success" && res.data) {
            res.data.forEach(function (item) {
              treeData.push(_objectSpread({
                key: item.id,
                type: 'department',
                parentNode: null,
                children: []
              }, item));
            });

            _this2.setState({
              treeData: treeData,
              loading: false
            });
          }
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "findChildrens", function (treeNode) {
      var orgId = treeNode.props.eventKey;

      if (treeNode.props.children.length === 0) {
        if (orgId == 'zjlxr') {
          //最近联系人
          var latelyContactors = JSON.parse(localStorage.getItem("latelyContactors"));

          if (latelyContactors) {
            treeNode.props['data-ref'].children = _this2.latelyContactorData;

            var treeData = _this2.state.treeData.concat();

            _this2.setState({
              treeData: treeData
            });
          }
        } else if (treeNode.props['data-ref'].type == 'court') {
          userSelect.findTreeChildren(orgId).then(function (res) {
            return res.json();
          }).then(function (res) {
            if (res.code = 'success' && res.data) {
              var arr = [];
              res.data.forEach(function (item) {
                arr.push(_objectSpread({
                  key: item.id,
                  type: 'department',
                  parentNode: treeNode.props,
                  children: []
                }, item));
              });
              treeNode.props['data-ref'].children = arr;

              var _treeData = _this2.state.treeData.concat();

              _this2.setState({
                treeData: _treeData
              });
            } else {
              message.error('获取数据失败');
            }
          }).catch(function (err) {
            throw err;
          });
        } else {
          userSelect.findUsers(orgId).then(function (res) {
            return res.json();
          }).then(function (res) {
            if (res.code = 'success' && res.data) {
              var arr = [];
              res.data.forEach(function (item) {
                if (item.isAvailable === 1) {
                  arr.push(_objectSpread({
                    name: item.nickname,
                    key: item.username,
                    type: 'person',
                    parentNode: treeNode.props,
                    isLeaf: true
                  }, item));
                }
              });
              treeNode.props['data-ref'].children = arr;

              var _treeData2 = _this2.state.treeData.concat();

              _this2.setState({
                treeData: _treeData2
              });
            } else {
              message.error('获取数据失败');
            }
          }).catch(function (err) {
            throw err;
          });
        }
      }
    });

    _this2.state = {
      treeData: [{
        name: '最近使用',
        key: 'zjlxr',
        type: 'zjlxr',
        children: []
      }],
      loading: false
    };
    _this2.latelyContactorData = [];
    _this2.checkedKeys = [];
    return _this2;
  }

  var _proto = RyTree.prototype;

  _proto.componentWillMount = function componentWillMount() {
    var latelyContactors = JSON.parse(localStorage.getItem("latelyContactors"));

    if (latelyContactors) {
      this.latelyContactorData = latelyContactors.map(function (item) {
        return _objectSpread({
          name: item.nickname,
          key: 'contactor-' + item.username,
          type: 'contactor',
          isLeaf: true
        }, item);
      });
    }

    this.findParents();
  };

  _proto.render = function render() {
    var _this3 = this;

    var stylePrefix = 'rjd-rySelector-ryTree';
    this.checkedKeys = cacCheckedKeys(this.props.selectedRys.map(function (item) {
      return item.username;
    }), this.state.treeData, this.props.userRange);

    var loop = function loop(data, parentNode) {
      return data.map(function (item) {
        if (item.children) {
          return React.createElement(TreeNode, {
            key: item.key,
            title: item.name,
            "data-ref": item
          }, loop(item.children, item));
        }

        return React.createElement(TreeNode, {
          key: item.key,
          title: item.name,
          "data-ref": item,
          isLeaf: item.isLeaf
        });
      });
    };

    var treeNodes = loop(this.state.treeData, {
      parentNode: null
    });
    return React.createElement("div", {
      className: stylePrefix
    }, React.createElement(Spin, {
      spinning: this.state.loading
    }, React.createElement(Tree, {
      loadData: this.onLoadData,
      checkable: this.props.checkable,
      checkedKeys: this.checkedKeys,
      onCheck: function onCheck(nextCheckedKeys, e) {
        return onCheckTree.call(_this3, nextCheckedKeys, e, _this3.props.selectedRys);
      },
      onSelect: function onSelect(selectedKeys, e) {
        return onSelectTree.call(_this3, selectedKeys, e);
      },
      className: stylePrefix + "-orgTree"
    }, treeNodes)));
  };

  return RyTree;
}(Component);

export { RyTree as default };
RyTree.propTypes = {
  selectedRys: PropTypes.array,
  checkable: PropTypes.bool,
  userRange: PropTypes.number,
  onChange: PropTypes.func.isRequired
};
RyTree.defaultProps = {
  selectedRys: [],
  userRange: 3,
  checkable: true
};
import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";
import _assertThisInitialized from "@babel/runtime-corejs2/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime-corejs2/helpers/defineProperty";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import fyData from './fyData';
import Icon from '../../../../icon';
import TreeSelect from '../../../../tree-select';
/**
 * 法院 TreeSelect
 */

var stylePrefix = 'rj-login';

var FyTreeSelect =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(FyTreeSelect, _Component);

  function FyTreeSelect(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSelectChange", function (value) {
      _this.triggerChange(value);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "triggerChange", function (changeValue) {
      var onChange = _this.props.onChange;

      if (onChange) {
        onChange(changeValue);
      }
    });

    return _this;
  }

  var _proto = FyTreeSelect.prototype;

  _proto.render = function render() {
    var expandedKeys = ["1600"];
    var _this$props = this.props,
        style = _this$props.style,
        dropdownStyle = _this$props.dropdownStyle,
        multiple = _this$props.multiple,
        allowClear = _this$props.allowClear,
        placeholder = _this$props.placeholder,
        showSearch = _this$props.showSearch,
        value = _this$props.value;
    return React.createElement("span", {
      className: stylePrefix + '-select-affix-wrapper'
    }, React.createElement("span", {
      className: stylePrefix + '-select-input-prefix'
    }, React.createElement(Icon, {
      type: "wdmh",
      style: {
        color: '#999',
        fontSize: 18
      }
    })), React.createElement(TreeSelect, {
      style: style,
      value: value,
      treeData: fyData,
      multiple: multiple,
      allowClear: allowClear,
      showSearch: showSearch,
      placeholder: placeholder,
      dropdownStyle: dropdownStyle,
      treeDefaultExpandedKeys: expandedKeys,
      onChange: this.handleSelectChange,
      filterTreeNode: this.filterSelectNode
    }));
  };

  return FyTreeSelect;
}(Component);

FyTreeSelect.propTypes = {
  style: PropTypes.object,
  dropdownStyle: PropTypes.object,
  multiple: PropTypes.bool,
  allowClear: PropTypes.bool,
  showSearch: PropTypes.bool,
  placeholder: PropTypes.string,
  onChange: PropTypes.func,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),
  prefix: PropTypes.node
};
FyTreeSelect.defaultProps = {
  placeholder: "请选择",
  dropdownStyle: {
    maxHeight: 450,
    overflow: 'auto'
  }
};
export default FyTreeSelect;
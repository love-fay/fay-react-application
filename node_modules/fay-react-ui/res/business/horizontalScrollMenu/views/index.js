import _objectSpread from "@babel/runtime-corejs2/helpers/objectSpread";
import _Array$of from "@babel/runtime-corejs2/core-js/array/of";
import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";
import _assertThisInitialized from "@babel/runtime-corejs2/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime-corejs2/helpers/defineProperty";
import React, { Component } from 'react';
import get from 'rj-lib/fetch/get';
import Menu from '../../../../menu';
import Icon from '../../../../icon';
import Spin from '../../../../spin';
import CustomScroll from '../../../../customScroll';
import { serviceUrl } from '../../../../config';
import '../style/index.less';
var SubMenu = Menu.SubMenu;
import PropTypes from 'prop-types';

var HorizontalScrollMenu =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(HorizontalScrollMenu, _Component);

  function HorizontalScrollMenu(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getData", function () {
      var _this$props = _this.props,
          sn = _this$props.sn,
          type = _this$props.type;

      if (type === 'APP') {
        get(serviceUrl + '/simba-uums-main/v1/uums/menuResource/auth/findMenu', undefined, sn).then(function (res) {
          return res.json();
        }).then(function (res) {
          var data = res.data;
          var pcMap = {};

          for (var i in data) {
            if (data.hasOwnProperty(i)) {
              var menu = data[i];
              var parentId = menu.parentId;

              if (parentId === null) {
                //将一级根目录放在pcMap.top
                var top = pcMap.top;
                top = top === undefined ? _Array$of() : top;
                top.push(menu);
                pcMap.top = top;
              } else {
                //将有相同的parentId放在统一数组里，parentId做为pcMa的key
                var children = pcMap[parentId];
                children = children === undefined ? _Array$of() : children;
                children.push(menu);
                pcMap[parentId] = children;
              }
            }
          }

          _this.generateMenu(pcMap);
        }).catch(function (err) {
          throw err;
        });
      } else if (type === 'MENURESOURCE') {
        get(serviceUrl + '/simba-uums-main/v1/uums/menuResource/auth/findChildMenus/' + sn, undefined).then(function (res) {
          return res.json();
        }).then(function (res) {
          var data = res.data;
          var pcMap = {};

          for (var i in data) {
            if (data.hasOwnProperty(i)) {
              var menu = data[i];
              var parentSn = menu.parentSn;
              var parentId = menu.parentId;

              if (parentSn === sn) {
                //将一级根目录放在pcMap.top
                var top = pcMap.top;
                top = top === undefined ? _Array$of() : top;
                top.push(menu);
                pcMap.top = top;
              } else {
                //将有相同的parentId放在统一数组里，parentId做为pcMa的key
                var children = pcMap[parentId];
                children = children === undefined ? _Array$of() : children;
                children.push(menu);
                pcMap[parentId] = children;
              }
            }
          }

          _this.generateMenu(pcMap);
        }).catch(function (err) {
          throw err;
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "generateMenu", function (pcMap) {
      var menus = _Array$of();

      var navKeyMap = {};
      navKeyMap.firstKeyMap = 0;
      var pcMapTop = pcMap.top;

      for (var i in pcMapTop) {
        if (pcMapTop.hasOwnProperty(i)) {
          var menu = pcMapTop[i];

          var tree = _this.recursiveTree(menu, pcMap, _Array$of(), navKeyMap);

          menus.push(tree.html);
        }
      }

      var html = menus.map(function (data, index) {
        return data;
      }); // this.navMap = navKeyMap;

      var openKeys = navKeyMap[_this.props.pathname];
      openKeys = openKeys === undefined ? navKeyMap.firstKeyMap : openKeys;

      if (_this._isMounted) {
        _this.setState({
          openKeys: openKeys,
          html: html
        });
      }
    });

    _this.state = {
      openKeys: null,
      html: null
    };
    return _this;
  }

  var _proto = HorizontalScrollMenu.prototype;

  _proto.componentWillMount = function componentWillMount() {
    this._isMounted = true;
    this.getData();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this._isMounted = false;
  };

  _proto.recursiveTree = function recursiveTree(parent, pcMap, navKeyArray, navMap) {
    parent.children = _Array$of();
    var map = {};
    var html = '';

    if (pcMap[parent.id] === undefined) {
      var key = parent.menuUrl === null ? "" : parent.menuUrl;

      if (parent.menuIcon === null) {
        html = React.createElement(Menu.Item, {
          key: key
        }, parent.menuName);
      } else {
        html = React.createElement(Menu.Item, {
          key: key
        }, React.createElement(Icon, {
          type: parent.menuIcon
        }), parent.menuName);
      }

      var a = [].concat(navKeyArray);

      if (navMap.firstKeyMap === 0) {
        navMap.firstKeyMap = a;
      }

      navMap[parent.menuUrl] = a;
    } else {
      navKeyArray.push(parent.id);
      var pcMapParent = pcMap[parent.id];

      for (var i in pcMapParent) {
        if (pcMapParent.hasOwnProperty(i)) {
          var child = pcMapParent[i];
          map = this.recursiveTree(child, pcMap, navKeyArray, navMap);
          var m = map.html;
          parent.children.push(m);
        }
      }

      var childrenHtml = parent.children.map(function (data, index) {
        return data;
      });

      if (parent.menuIcon === null) {
        html = React.createElement(SubMenu, {
          key: parent.id,
          title: React.createElement("span", null, parent.menuName)
        }, childrenHtml);
      } else {
        html = React.createElement(SubMenu, {
          key: parent.id,
          title: React.createElement("span", null, React.createElement(Icon, {
            type: parent.menuIcon
          }), React.createElement("span", null, parent.menuName))
        }, childrenHtml);
      }
    }

    map.html = html;
    return map;
  };

  _proto.render = function render() {
    var stylePrefix = 'rj-horizontal-scroll-menu';
    var _this$state = this.state,
        html = _this$state.html,
        openKeys = _this$state.openKeys;
    var _this$props2 = this.props,
        style = _this$props2.style,
        menuClick = _this$props2.menuClick;

    if (html === null) {
      return React.createElement("div", {
        className: stylePrefix,
        style: _objectSpread({}, style)
      }, React.createElement(Spin, {
        tip: "\u83DC\u5355\u52A0\u8F7D\u4E2D..."
      }));
    } else if (html.length === 0) {
      return React.createElement("div", {
        className: stylePrefix,
        style: _objectSpread({}, style)
      }, "\u60A8\u6CA1\u6709\u88AB\u6388\u4E88\u4EFB\u4F55\u83DC\u5355\u6743\u9650");
    } else {
      return React.createElement(CustomScroll, {
        className: stylePrefix,
        style: _objectSpread({}, style)
      }, React.createElement(Menu, {
        onClick: menuClick,
        defaultOpenKeys: openKeys,
        selectedKeys: [this.props.pathname],
        mode: "inline",
        style: {
          width: 'auto'
        }
      }, html));
    }
  };

  return HorizontalScrollMenu;
}(Component);

HorizontalScrollMenu.propTypes = {
  sn: PropTypes.string.isRequired,
  pathname: PropTypes.string.isRequired,
  type: PropTypes.string,
  style: PropTypes.object,
  menuClick: PropTypes.func
};
export default HorizontalScrollMenu;
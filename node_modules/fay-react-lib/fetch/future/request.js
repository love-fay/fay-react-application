import _Promise from "@babel/runtime-corejs2/core-js/promise";
import _Object$keys from "@babel/runtime-corejs2/core-js/object/keys";
import _JSON$stringify from "@babel/runtime-corejs2/core-js/json/stringify";

/**
 * Created by feichongzheng on 17/1/5.
 */
import { loginUser } from '../../user';

var authorization = function authorization(_ref) {
  var appSn = _ref.appSn;
  var user = loginUser();
  var Authorization = {};
  Authorization.appSn = appSn;
  user && (Authorization.token = user.token);
  return _JSON$stringify(Authorization);
};

var headers = function headers(_ref2) {
  var appSn = _ref2.appSn,
      contentType = _ref2.contentType,
      _ref2$acceptType = _ref2.acceptType,
      acceptType = _ref2$acceptType === void 0 ? "application/json" : _ref2$acceptType,
      auth = _ref2.auth;
  var headers = new Headers();
  contentType && headers.append("Content-Type", "application/json");
  headers.append("Accept", acceptType);
  auth && headers.append("Authorization", authorization({
    appSn: appSn
  }));
  var pathname = window.location.pathname;

  if (pathname === '/login') {
    headers.append("client_id", "fjfy");
    headers.append("client_secret", "secret");
  }

  return headers;
};

export var getQueryString = function getQueryString(params) {
  if (params) {
    var arr = [];

    _Object$keys(params).forEach(function (key) {
      arr.push(key + '=' + encodeURIComponent(params[key]));
    });

    return '?' + arr.join('&');
  } else {
    return '';
  }
};
export var reqGetBrace = function reqGetBrace(_ref3) {
  var method = _ref3.method,
      appSn = _ref3.appSn,
      contentType = _ref3.contentType,
      acceptType = _ref3.acceptType,
      _ref3$auth = _ref3.auth,
      auth = _ref3$auth === void 0 ? true : _ref3$auth;
  return {
    method: method,
    headers: headers({
      appSn: appSn,
      contentType: contentType,
      acceptType: acceptType,
      auth: auth
    }),
    mode: 'cors',
    cache: 'default'
  };
};
export var reqPostBrace = function reqPostBrace(_ref4) {
  var method = _ref4.method,
      _ref4$params = _ref4.params,
      params = _ref4$params === void 0 ? {} : _ref4$params,
      appSn = _ref4.appSn,
      contentType = _ref4.contentType,
      acceptType = _ref4.acceptType,
      _ref4$auth = _ref4.auth,
      auth = _ref4$auth === void 0 ? true : _ref4$auth;
  return {
    method: method,
    headers: headers({
      appSn: appSn,
      contentType: contentType,
      acceptType: acceptType,
      auth: auth
    }),
    mode: 'cors',
    cache: 'default',
    body: contentType ? typeof params === 'object' ? _JSON$stringify(params) : params : params
  };
};
export var promise = function promise(url, options) {
  if (options === void 0) {
    options = {};
  }

  var req = new Request(url, options);
  return new _Promise(function (resolve, reject) {
    fetch(req).then(function (res) {
      var status = res.status;

      if (status === 401) {
        var pathname = window.location.pathname;
        pathname === '/login' || (window.location.pathname = '/login');
      }

      resolve(res);
    }).catch(function (err) {
      console.log(err);
      reject(err);
    });
  });
};
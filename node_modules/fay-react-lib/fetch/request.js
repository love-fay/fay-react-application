import _Promise from "@babel/runtime-corejs2/core-js/promise";
import _Object$keys from "@babel/runtime-corejs2/core-js/object/keys";
import _JSON$stringify from "@babel/runtime-corejs2/core-js/json/stringify";

/**
 * Created by feichongzheng on 17/1/5.
 */
import { loginUser } from '../user';

var authorization = function authorization(appSn) {
  var user = loginUser();
  var Authorization = {};
  Authorization.appSn = appSn;
  user && (Authorization.token = user.token);
  return _JSON$stringify(Authorization);
};

var headers = function headers(appSn, defaultJson, acceptType, auth) {
  if (acceptType === void 0) {
    acceptType = "application/json";
  }

  var headers = new Headers();
  defaultJson && headers.append("Content-Type", "application/json");
  headers.append("Accept", acceptType);
  auth && headers.append("Authorization", authorization(appSn));
  var pathname = window.location.pathname;

  if (pathname === '/login') {
    headers.append("client_id", "fjfy");
    headers.append("client_secret", "secret");
  }

  return headers;
};

export var getQueryString = function getQueryString(params) {
  if (params) {
    var arr = [];

    _Object$keys(params).forEach(function (key) {
      arr.push(key + '=' + encodeURIComponent(params[key]));
    });

    return '?' + arr.join('&');
  } else {
    return '';
  }
};
export var reqGetBrace = function reqGetBrace(method, appSn, defaultJson, acceptType, auth) {
  if (defaultJson === void 0) {
    defaultJson = true;
  }

  if (auth === void 0) {
    auth = true;
  }

  return {
    method: method,
    headers: headers(appSn, defaultJson, acceptType, auth),
    mode: 'cors',
    cache: 'default'
  };
};
export var reqPostBrace = function reqPostBrace(method, params, appSn, defaultJson, acceptType, auth) {
  if (params === void 0) {
    params = {};
  }

  if (defaultJson === void 0) {
    defaultJson = true;
  }

  if (auth === void 0) {
    auth = true;
  }

  return {
    method: method,
    headers: headers(appSn, defaultJson, acceptType, auth),
    mode: 'cors',
    cache: 'default',
    body: defaultJson ? _JSON$stringify(params) : params
  };
};
export var promise = function promise(url, options) {
  if (options === void 0) {
    options = {};
  }

  var req = new Request(url, options);
  return new _Promise(function (resolve, reject) {
    fetch(req).then(function (res) {
      var status = res.status;

      if (status === 401) {
        var pathname = window.location.pathname;
        pathname === '/login' || (window.location.pathname = '/login');
      }

      resolve(res);
    }).catch(function (err) {
      console.log(err);
      reject(err);
    });
  });
};
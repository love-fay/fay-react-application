import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";
import _assertThisInitialized from "@babel/runtime-corejs2/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime-corejs2/helpers/defineProperty";
import React, { Component } from 'react';
import { isLogin } from '../user';
import { withRouter } from 'react-router-dom';

var Auth =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Auth, _Component);

  function Auth() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "goToLogin", function () {
      var _this$props = _this.props,
          location = _this$props.location,
          history = _this$props.history;
      var pathname = location.pathname;

      try {
        var href = window.location.href;
        window.location.origin = pathname === '' || pathname === '/' ? href : href.split(pathname)[0];
      } catch (e) {}

      if (_this.needLogin(_this.props)) {
        history.push('/login', {
          from: location
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "needLogin", function (_ref) {
      var location = _ref.location,
          unAuth = _ref.unAuth;
      var pathname = location.pathname;
      return !isLogin() && pathname !== '/login' && !(unAuth && unAuth.includes(pathname));
    });

    return _this;
  }

  var _proto = Auth.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.goToLogin();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.goToLogin();
  };

  _proto.render = function render() {
    if (this.needLogin(this.props)) {
      return React.createElement("div", null);
    }

    return this.props.children;
  };

  return Auth;
}(Component);

export default withRouter(Auth);
import _objectSpread from "@babel/runtime-corejs2/helpers/objectSpread";
import _JSON$stringify from "@babel/runtime-corejs2/core-js/json/stringify";
import _Object$is from "@babel/runtime-corejs2/core-js/object/is";
import _Map from "@babel/runtime-corejs2/core-js/map";
import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";
import _assertThisInitialized from "@babel/runtime-corejs2/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime-corejs2/helpers/defineProperty";
import React, { Component } from 'react';
import TreeSelect from '../../../tree-select';
import ajlbData from './ajlbData';
import PropTypes from 'prop-types';

var AjlbTreeSelect =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(AjlbTreeSelect, _Component);

  function AjlbTreeSelect(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "filterSelectNode", function (value, node) {
      return node.props.title.indexOf(value) > -1;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onChange", function (value, label, extra) {
      var map = _this.state.map;

      if (_this.props.multiple && extra.clear) {
        map.delete(value);
      } else {
        var triggerValue = extra.triggerValue;
        var _extra$triggerNode$pr = extra.triggerNode.props,
            ajlb = _extra$triggerNode$pr.ajlb,
            spcx = _extra$triggerNode$pr.spcx;
        map.set(triggerValue, {
          value: triggerValue,
          ajlb: ajlb,
          spcx: spcx
        });
      }

      _this.setState({
        map: map
      });

      _this.props.onChange(value, label, map);
    });

    _this.state = {
      map: new _Map()
    };
    return _this;
  }

  var _proto = AjlbTreeSelect.prototype;

  _proto.render = function render() {
    var expandedKeys = [];
    var _this$props = this.props,
        _this$props$style = _this$props.style,
        style = _this$props$style === void 0 ? {
      width: 300
    } : _this$props$style,
        multiple = _this$props.multiple,
        value = _this$props.value,
        defAjlb = _this$props.defAjlb;
    var treeData = ajlbData.data;
    defAjlb && (treeData = treeData.filter(function (item) {
      return _Object$is(_JSON$stringify(item), _JSON$stringify(_objectSpread({}, item, defAjlb)));
    }));
    return React.createElement(TreeSelect, {
      style: style,
      value: value,
      onChange: this.onChange,
      dropdownStyle: {
        maxHeight: 300,
        overflow: 'auto'
      },
      treeData: treeData,
      placeholder: "\u8BF7\u9009\u62E9",
      treeDefaultExpandedKeys: expandedKeys,
      multiple: multiple,
      filterTreeNode: this.filterSelectNode
    });
  };

  return AjlbTreeSelect;
}(Component);

AjlbTreeSelect.propTypes = {
  style: PropTypes.object,
  defAjlb: PropTypes.object,
  multiple: PropTypes.bool,
  onChange: PropTypes.func,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.array])
};
export default AjlbTreeSelect;
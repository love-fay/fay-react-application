import _getIterator from "@babel/runtime-corejs2/core-js/get-iterator";
import _JSON$stringify from "@babel/runtime-corejs2/core-js/json/stringify";
import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";
import _assertThisInitialized from "@babel/runtime-corejs2/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime-corejs2/helpers/defineProperty";

/**
 * Created by Administrator on 2018/5/24.
 */
import React, { Component } from "react";
import PropTypes from "prop-types";
import { loginUser } from "rj-lib/user";
import { userSelect } from './api';
import "./style/index.less";
import ToggleBox from './toggleBox';
import SelectedInput from './selectedInput';
import QueryList from "./queryList";
import LatelyContactorsBox from "./latelyContactorsBox";
var userInfo = loginUser();
var latelyContactorsSize = 20; //最多存储最近联系人个数

/**
 * 增加选中人员
 * @param rys
 */

function addSelectedRys(rys) {
  var selectedRys = this.selectedRys;

  if (!this.props.multiple) {
    if (selectedRys.length > 0) {
      return;
    }
  }

  var newRys = rys.filter(function (ryItem) {
    return selectedRys.filter(function (selectedRyItem) {
      return selectedRyItem.username == ryItem.username;
    }).length == 0;
  });
  newRys.map(function (newRyItem) {
    return selectedRys.push(newRyItem);
  });
  this.props.onChange(selectedRys);
}
/**
 * 取消选中人员
 * @param rys
 */


function cancelSelectedRys(rys) {
  var selectedRys = this.selectedRys;
  var newSelectedRys = selectedRys.filter(function (selectedRyItem) {
    return rys.filter(function (ryItem) {
      return ryItem.username == selectedRyItem.username;
    }).length == 0;
  });
  this.props.onChange(newSelectedRys);
}

function onBackspaceSelectedInput() {
  var selectedRys = this.selectedRys;
  selectedRys.pop();
  this.props.onChange(selectedRys);
}
/**
 * 关闭输入框中的标签
 * @param username
 */


function onCloseSelectedInput(username) {
  cancelSelectedRys.call(this, [{
    username: username
  }]);
}
/**
 * 根据输入框中的输入进行搜索
 * @param str
 */


function onChangeSearch(str) {
  this.setState({
    searchValue: str
  });

  if (str != "") {
    fetchTableData.call(this, {
      str: str,
      current: this.state.pagination.current,
      pageSize: this.state.pagination.pageSize
    });
  }

  ;
}

function fetchTableData(_ref) {
  var _this = this;

  var str = _ref.str,
      current = _ref.current,
      pageSize = _ref.pageSize;
  var userRange = this.props.userRange;
  var currentPage = current - 1;
  var fyfjm = parseInt(userRange) === 3 && userInfo ? userInfo.fyfjm : "";
  var params = {
    queryStr: str,
    page: currentPage,
    size: pageSize,
    fyfjm: fyfjm
  };
  userSelect.findUserDTOPage(params).then(function (res) {
    return res.json();
  }).then(function (res) {
    if (res.code === "success" && res.data) {
      var pagination = _this.state.pagination;
      pagination.current = current;
      pagination.pageSize = pageSize;
      pagination.total = res.data.totalElements;
      var arr = [];
      res.data.content.forEach(function (item) {
        arr.push({
          id: item.userid,
          username: item.username,
          value: item.username,
          nickname: item.nickname,
          label: item.nickname,
          phone: item.phone,
          zj: item.zj,
          zw: item.zw,
          rybs: item.rybs,
          orgName: item.orgName,
          departmentName: item.departmentName,
          dfsId: item.dfsId,
          departmentInfo: (item.departmentName ? item.departmentName : "") + " / " + (item.orgName ? item.orgName : null),
          fyfjm: item.fyfjm,
          bmbs: item.bmbs
        });
      });

      _this.setState({
        tableData: arr,
        pagination: pagination
      });
    }
  });
}

;

function onClickList(id, username, nickname, rybs, orgName, departmentName, fyfjm, bmbs) {
  addSelectedRys.call(this, [{
    id: id,
    username: username,
    rybs: rybs,
    nickname: nickname,
    orgName: orgName,
    departmentName: departmentName,
    fyfjm: fyfjm,
    bmbs: bmbs
  }]);
  this.setState({
    searchValue: ""
  });
}

var RySelectInput =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(RySelectInput, _Component);

  function RySelectInput(props) {
    var _this2;

    _this2 = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "hide", function () {
      if (!_this2.clickBox) {
        _this2.setState({
          visibaleToggleBox: false
        });
        /**------------------------------------保存最近联系人 start------------------------------------------**/


        var selectedRys = _this2.selectedRys;
        var latelyContactors = selectedRys.concat();

        if (latelyContactors.length > latelyContactorsSize) {
          latelyContactors.splice(latelyContactorsSize);
          localStorage.setItem("latelyContactors", _JSON$stringify(latelyContactors));
        } else {
          var data = JSON.parse(localStorage.getItem("latelyContactors"));

          if (data) {
            var _loop = function _loop() {
              if (_isArray) {
                if (_i >= _iterator.length) return "break";
                _ref2 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) return "break";
                _ref2 = _i.value;
              }

              var item = _ref2;

              if (latelyContactors.length > latelyContactorsSize - 1) {
                return "break";
              }

              var ts = latelyContactors.filter(function (contactor) {
                return contactor.username == item.username;
              });

              if (ts.length == 0) {
                latelyContactors.push(item);
              }
            };

            for (var _iterator = data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref2;

              var _ret = _loop();

              if (_ret === "break") break;
            }
          }

          localStorage.setItem("latelyContactors", _JSON$stringify(latelyContactors));
        }
        /**------------------------------------保存最近联系人 end------------------------------------------**/

      }

      _this2.clickBox = false;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "onClickBox", function (event) {
      // event = event || window.event;
      // event.nativeEvent.stopImmediatePropagation();
      _this2.clickBox = true;

      _this2.setState({
        visibaleToggleBox: true
      });

      _this2.box.querySelector('.rj-rySelector-queryInput-input').focus();
    });

    _this2.state = {
      tableData: [],
      //下拉列表数据
      pagination: {
        size: "small",
        showTotal: function showTotal(total, range) {
          return "\u603B\u8BA1 " + total + " \u6761";
        },
        current: 1,
        pageSize: 10,
        total: 0,
        onChange: function onChange(current, pageSize) {
          return fetchTableData.call(_assertThisInitialized(_assertThisInitialized(_this2)), {
            str: _this2.state.searchValue,
            current: current,
            pageSize: pageSize
          });
        }
      },
      searchValue: "",
      //搜索框输入
      visibaleToggleBox: false //下拉框显示隐藏

    };
    _this2.selectedRys = [];
    _this2.clickBox = false;
    return _this2;
  }

  var _proto = RySelectInput.prototype;

  _proto.componentDidMount = function componentDidMount() {
    document.addEventListener("click", this.hide);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    document.removeEventListener("click", this.hide); // this.card.removeEventListener("click",this.stopPropagation);
  };

  _proto.render = function render() {
    var _this3 = this;

    this.selectedRys = this.props.selectedRys ? this.props.selectedRys.concat() : this.props.defaultSelectedRys.concat();
    var stylePrefix = 'rj-rySelector-rySelectInput';
    return React.createElement("div", {
      className: stylePrefix,
      ref: function ref(node) {
        return _this3.box = node;
      },
      onClick: this.onClickBox
    }, React.createElement(SelectedInput, {
      value: this.state.searchValue,
      selectedRys: this.selectedRys,
      width: this.props.inputWidth,
      onChange: function onChange(str) {
        return onChangeSearch.call(_this3, str);
      },
      onClose: function onClose(username) {
        return onCloseSelectedInput.call(_this3, username);
      },
      onBackspace: function onBackspace() {
        return onBackspaceSelectedInput.call(_this3);
      }
    }), React.createElement("div", {
      className: "tBox"
    }, React.createElement(ToggleBox, {
      visibale: this.state.visibaleToggleBox
    }, this.state.searchValue === "" ? React.createElement(LatelyContactorsBox, {
      selectedRys: this.selectedRys,
      multiple: this.props.multiple,
      onChange: this.props.onChange
    }) : React.createElement(QueryList, {
      dataSource: this.state.tableData,
      pagination: this.state.pagination,
      onClick: function onClick(item) {
        return onClickList.call(_this3, item.id, item.username, item.nickname, item.rybs, item.orgName, item.departmentName, item.fyfjm, item.bmbs);
      }
    }))));
  };

  return RySelectInput;
}(Component);

export { RySelectInput as default };
RySelectInput.propTypes = {
  defaultSelectedRys: PropTypes.array,
  selectedRys: PropTypes.array,
  userRange: PropTypes.number,
  multiple: PropTypes.bool,
  inputWidth: PropTypes.number,
  onChange: PropTypes.func.isRequired
};
RySelectInput.defaultProps = {
  defaultSelectedRys: [],
  userRange: 3,
  multiple: true,
  inputWidth: 274
};
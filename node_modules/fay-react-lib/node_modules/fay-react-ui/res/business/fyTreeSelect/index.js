import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";
import _assertThisInitialized from "@babel/runtime-corejs2/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime-corejs2/helpers/defineProperty";
import React, { Component } from 'react';
import TreeSelect from '../../../tree-select';
import fyData from './fyData';
import PropTypes from 'prop-types';

var FyTreeSelect =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(FyTreeSelect, _Component);

  function FyTreeSelect() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "filterSelectNode", function (value, node) {
      return node.props.title.indexOf(value) > -1;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "filterData", function (data, v) {
      return data.filter(function (item) {
        return item.value === v || item.key === v;
      });
    });

    return _this;
  }

  var _proto = FyTreeSelect.prototype;

  _proto.render = function render() {
    var expandedKeys = ["1600"];
    var _this$props = this.props,
        _this$props$style = _this$props.style,
        style = _this$props$style === void 0 ? {
      width: 300
    } : _this$props$style,
        multiple = _this$props.multiple,
        showSearch = _this$props.showSearch,
        onChange = _this$props.onChange,
        value = _this$props.value,
        defFy = _this$props.defFy;
    var treeData = fyData.data;

    if (defFy) {
      if (defFy.value && defFy.value !== -1 || defFy.key && defFy.key !== 1600) {
        treeData = this.filterData(treeData[0].children, defFy.value || defFy.key).concat();
      }
    }

    return React.createElement(TreeSelect, {
      style: style,
      value: value,
      onChange: onChange,
      dropdownStyle: {
        maxHeight: 400,
        overflow: 'auto'
      },
      treeData: treeData,
      placeholder: "\u8BF7\u9009\u62E9",
      treeDefaultExpandedKeys: expandedKeys,
      multiple: multiple,
      showSearch: showSearch,
      filterTreeNode: this.filterSelectNode
    });
  };

  return FyTreeSelect;
}(Component);

FyTreeSelect.propTypes = {
  style: PropTypes.object,
  defFy: PropTypes.object,
  multiple: PropTypes.bool,
  showSearch: PropTypes.bool,
  onChange: PropTypes.func,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.array])
};
export default FyTreeSelect;
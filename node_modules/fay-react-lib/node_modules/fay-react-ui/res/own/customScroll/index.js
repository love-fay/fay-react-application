import _objectSpread from "@babel/runtime-corejs2/helpers/objectSpread";
import _inheritsLoose from "@babel/runtime-corejs2/helpers/inheritsLoose";
import _assertThisInitialized from "@babel/runtime-corejs2/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime-corejs2/helpers/defineProperty";
import React, { Component } from 'react';
import './style/index.less';
import PropTypes from "prop-types";
import classnames from 'classnames';

function getScrollBarWidth() {
  var odiv = document.createElement('div'),
      styles = {
    width: '100px',
    height: '100px',
    overflowY: 'scroll'
  },
      i,
      scrollBarWidth;

  for (i in styles) {
    odiv.style[i] = styles[i];
  }

  document.body.appendChild(odiv);
  scrollBarWidth = odiv.offsetWidth - odiv.clientWidth;
  document.body.removeChild(odiv);
  return scrollBarWidth;
}

var windowScrollBar = getScrollBarWidth();
var customScrollBar = 7;
var diffScrollBar = windowScrollBar - customScrollBar;

var Index =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Index, _Component);

  function Index(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "scrollCache", {});

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMouseEnter", function () {
      _this.setState({
        bar: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMouseLeave", function () {
      _this.setState({
        bar: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "mouseDownBarY", function (e) {
      e.preventDefault();

      _this.setState({
        mouseDownBarY: e.clientY,
        barScrollTop: _this.state.barYTop
      });

      document.addEventListener('mousemove', _this.moveY, false);
      document.addEventListener('mouseup', _this.mouseUpBarY, false);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "mouseUpBarY", function () {
      _this.setState({
        mouseDownBarY: undefined
      });

      document.removeEventListener('mousemove', _this.moveY, false);
      document.removeEventListener('mouseup', _this.mouseUpBarY, false);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "moveY", function (e) {
      var _this$state = _this.state,
          mouseDownBarY = _this$state.mouseDownBarY,
          barYTop = _this$state.barYTop,
          barYHeight = _this$state.barYHeight,
          barX = _this$state.barX;

      if (mouseDownBarY) {
        var _this$contentRef$curr = _this.contentRef.current,
            clientHeight = _this$contentRef$curr.clientHeight,
            scrollHeight = _this$contentRef$curr.scrollHeight,
            style = _this$contentRef$curr.style;
        var borderBottomWidth = parseFloat(style.borderBottomWidth) + (barX ? windowScrollBar : 0);
        var barMoveY = e.clientY - mouseDownBarY;

        if (barMoveY > 0 && _this.state.barYTop + borderBottomWidth + barYHeight === 0) {
          return false;
        }

        if (barMoveY < 0 && _this.state.barYTop + borderBottomWidth + clientHeight === 0) {
          return false;
        }

        var newBarYTop = barMoveY + barYTop;
        _this.contentRef.current.scrollTop = (newBarYTop + clientHeight + borderBottomWidth) * scrollHeight / clientHeight;

        if (newBarYTop + barYHeight + borderBottomWidth > 0) {
          newBarYTop = -1 * barYHeight - borderBottomWidth;
        }

        if (newBarYTop + clientHeight + borderBottomWidth < 0) {
          newBarYTop = -1 * clientHeight - borderBottomWidth;
        }

        _this.setState({
          barYTop: newBarYTop,
          mouseDownBarY: e.clientY
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "mouseDownBarX", function (e) {
      e.preventDefault();

      _this.setState({
        mouseDownBarX: e.clientX
      });

      document.addEventListener('mousemove', _this.moveX, false);
      document.addEventListener('mouseup', _this.mouseUpBarX, false);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "mouseUpBarX", function () {
      _this.setState({
        mouseDownBarX: undefined
      });

      document.removeEventListener('mousemove', _this.moveX, false);
      document.removeEventListener('mouseup', _this.mouseUpBarX, false);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "moveX", function (e) {
      var _this$state2 = _this.state,
          mouseDownBarX = _this$state2.mouseDownBarX,
          barXLeft = _this$state2.barXLeft,
          barXWidth = _this$state2.barXWidth;

      if (mouseDownBarX) {
        var _this$contentRef$curr2 = _this.contentRef.current,
            clientWidth = _this$contentRef$curr2.clientWidth,
            style = _this$contentRef$curr2.style,
            scrollWidth = _this$contentRef$curr2.scrollWidth;
        var borderLeftWidth = parseFloat(style.borderLeftWidth);
        var barMoveX = e.clientX - mouseDownBarX;

        if (barMoveX > 0 && _this.state.barXLeft === clientWidth - barXWidth) {
          return false;
        }

        if (barMoveX < 0 && _this.state.barXLeft === borderLeftWidth) {
          return false;
        }

        var newBarXLeft = barMoveX + barXLeft;
        _this.contentRef.current.scrollLeft = newBarXLeft * scrollWidth / clientWidth;

        if (newBarXLeft > clientWidth - barXWidth + borderLeftWidth) {
          newBarXLeft = clientWidth - barXWidth + borderLeftWidth;
        }

        if (newBarXLeft < borderLeftWidth) {
          newBarXLeft = borderLeftWidth;
        }

        _this.setState({
          barXLeft: newBarXLeft,
          mouseDownBarX: e.clientX
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getScrollBarYWidth", function () {
      var _this$contentRef$curr3 = _this.contentRef.current,
          offsetWidth = _this$contentRef$curr3.offsetWidth,
          clientWidth = _this$contentRef$curr3.clientWidth;
      var style = window.getComputedStyle(_this.contentRef.current);
      return offsetWidth - clientWidth - parseFloat(style.borderLeftWidth) - parseFloat(style.borderRightWidth);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getScrollBarXHeight", function () {
      var _this$contentRef$curr4 = _this.contentRef.current,
          offsetHeight = _this$contentRef$curr4.offsetHeight,
          clientHeight = _this$contentRef$curr4.clientHeight;
      var style = window.getComputedStyle(_this.contentRef.current);
      return offsetHeight - clientHeight - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "heightChange", function () {
      var _this$scrollCache = _this.scrollCache,
          offsetHeightCache = _this$scrollCache.offsetHeightCache,
          clientHeightCache = _this$scrollCache.clientHeightCache,
          scrollHeightCache = _this$scrollCache.scrollHeightCache,
          barXCache = _this$scrollCache.barXCache;
      var _this$contentRef$curr5 = _this.contentRef.current,
          offsetHeight = _this$contentRef$curr5.offsetHeight,
          clientHeight = _this$contentRef$curr5.clientHeight,
          scrollHeight = _this$contentRef$curr5.scrollHeight;
      var barX = _this.state.barX;

      if (offsetHeight !== offsetHeightCache || clientHeight !== clientHeightCache || scrollHeight !== scrollHeightCache || barX !== barXCache) {
        _this.scrollCache = _objectSpread({}, _this.scrollCache, {
          offsetHeightCache: offsetHeight,
          clientHeightCache: clientHeight,
          scrollHeightCache: scrollHeight,
          barXCache: barX
        });
        return true;
      }

      return false;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "widthChange", function () {
      var _this$scrollCache2 = _this.scrollCache,
          offsetWidthCache = _this$scrollCache2.offsetWidthCache,
          clientWidthCache = _this$scrollCache2.clientWidthCache,
          scrollWidthCache = _this$scrollCache2.scrollWidthCache,
          barYCache = _this$scrollCache2.barYCache;
      var _this$contentRef$curr6 = _this.contentRef.current,
          offsetWidth = _this$contentRef$curr6.offsetWidth,
          clientWidth = _this$contentRef$curr6.clientWidth,
          scrollWidth = _this$contentRef$curr6.scrollWidth;
      var barY = _this.state.barY;

      if (offsetWidth !== offsetWidthCache || clientWidth !== clientWidthCache || scrollWidth !== scrollWidthCache || barY !== barYCache) {
        _this.scrollCache = _objectSpread({}, _this.scrollCache, {
          offsetWidthCache: offsetWidth,
          clientWidthCache: clientWidth,
          scrollWidthCache: scrollWidth,
          barYCache: barY
        });
        return true;
      }

      return false;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "resizeScrollBarY", function () {
      var _this$contentRef$curr7 = _this.contentRef.current,
          offsetWidth = _this$contentRef$curr7.offsetWidth,
          clientHeight = _this$contentRef$curr7.clientHeight,
          scrollHeight = _this$contentRef$curr7.scrollHeight,
          style = _this$contentRef$curr7.style;
      var borderRightWidth = parseFloat(style.borderRightWidth);
      var borderBottomWidth = parseFloat(style.borderBottomWidth);
      var rePosition = false;
      var _this$state3 = _this.state,
          barX = _this$state3.barX,
          barY = _this$state3.barY,
          barYHeight = _this$state3.barYHeight,
          barYLeft = _this$state3.barYLeft,
          barYBackgroundHeight = _this$state3.barYBackgroundHeight,
          barYBackgroundTop = _this$state3.barYBackgroundTop,
          barYBackgroundLeft = _this$state3.barYBackgroundLeft,
          barXTop = _this$state3.barXTop,
          barXBackgroundTop = _this$state3.barXBackgroundTop,
          overflowY = _this$state3.overflowY;

      if (_this.heightChange()) {
        if (overflowY) {
          if (_this.getScrollBarYWidth() === 0) {
            _this.scrollCache.scrollTopCache = undefined;
            barY = false;
          } else {
            barYHeight = clientHeight * clientHeight / scrollHeight;
            barYLeft = offsetWidth - borderRightWidth - windowScrollBar + (barY ? 0 : diffScrollBar);
            barYBackgroundLeft = offsetWidth - borderRightWidth - windowScrollBar + (barY ? 0 : diffScrollBar);
            barYBackgroundHeight = clientHeight + borderBottomWidth + (barX ? customScrollBar : 0);
            barYBackgroundTop = -1 * clientHeight - borderBottomWidth - (barX ? windowScrollBar : 0);
            barY = true;
          }
        }

        if (barX) {
          barXTop = -1 * windowScrollBar - borderBottomWidth;
          barXBackgroundTop = -1 * windowScrollBar - borderBottomWidth;
        }

        rePosition = true;

        if (_this.mount) {
          _this.setState({
            barY: barY,
            barYHeight: barYHeight,
            barYLeft: barYLeft,
            barYBackgroundHeight: barYBackgroundHeight,
            barYBackgroundTop: barYBackgroundTop,
            barYBackgroundLeft: barYBackgroundLeft,
            barXTop: barXTop,
            barXBackgroundTop: barXBackgroundTop
          });
        }
      }

      overflowY && _this.resizeScrollBarYPosition(barY, barX, rePosition);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "resizeScrollBarX", function () {
      var _this$contentRef$curr8 = _this.contentRef.current,
          offsetWidth = _this$contentRef$curr8.offsetWidth,
          scrollWidth = _this$contentRef$curr8.scrollWidth,
          clientWidth = _this$contentRef$curr8.clientWidth,
          style = _this$contentRef$curr8.style;
      var borderBottomWidth = parseFloat(style.borderBottomWidth);
      var borderRightWidth = parseFloat(style.borderRightWidth);
      var borderLeftWidth = parseFloat(style.borderLeftWidth);
      var rePosition = false;
      var _this$state4 = _this.state,
          barX = _this$state4.barX,
          barXWidth = _this$state4.barXWidth,
          barXBackgroundWidth = _this$state4.barXBackgroundWidth,
          barXTop = _this$state4.barXTop,
          barXBackgroundLeft = _this$state4.barXBackgroundLeft,
          barXBackgroundTop = _this$state4.barXBackgroundTop,
          barY = _this$state4.barY,
          barYLeft = _this$state4.barYLeft,
          barYBackgroundLeft = _this$state4.barYBackgroundLeft,
          overflowX = _this$state4.overflowX;

      if (_this.widthChange()) {
        if (overflowX) {
          if (_this.getScrollBarXHeight() === 0) {
            barX = false;
            _this.scrollCache.scrollLeftCache = undefined;
          } else {
            barX = true;
            barXWidth = clientWidth * clientWidth / scrollWidth;
            barXBackgroundWidth = clientWidth;
            barXTop = -1 * windowScrollBar - borderBottomWidth;
            barXBackgroundTop = -1 * windowScrollBar - borderBottomWidth;
            barXBackgroundLeft = borderLeftWidth;
          }
        }

        if (barY) {
          barYLeft = offsetWidth - borderRightWidth - windowScrollBar;
          barYBackgroundLeft = offsetWidth - borderRightWidth - windowScrollBar;
        }

        rePosition = true;

        if (_this.mount) {
          _this.setState({
            barX: barX,
            barXWidth: barXWidth,
            barXBackgroundWidth: barXBackgroundWidth,
            barXTop: barXTop,
            barXBackgroundLeft: barXBackgroundLeft,
            barXBackgroundTop: barXBackgroundTop,
            barYLeft: barYLeft,
            barYBackgroundLeft: barYBackgroundLeft
          });
        }
      }

      overflowX && _this.resizeScrollBarXPosition(barX, rePosition);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "resizeScrollBarYPosition", function (barY, barX, rePosition) {
      var _this$contentRef$curr9 = _this.contentRef.current,
          clientHeight = _this$contentRef$curr9.clientHeight,
          scrollHeight = _this$contentRef$curr9.scrollHeight,
          scrollTop = _this$contentRef$curr9.scrollTop,
          style = _this$contentRef$curr9.style;
      var borderBottomWidth = parseFloat(style.borderBottomWidth);
      var _this$scrollCache3 = _this.scrollCache,
          scrollTopCache = _this$scrollCache3.scrollTopCache,
          scrollLeftCache = _this$scrollCache3.scrollLeftCache,
          barXPositionCache = _this$scrollCache3.barXPositionCache;

      if (barY && (scrollTop !== scrollTopCache || rePosition)) {
        _this.scrollCache.scrollTopCache = scrollTop;
        var newBarYTop = scrollTop * clientHeight / scrollHeight - clientHeight - borderBottomWidth - (barX ? windowScrollBar : 0);

        if (_this.mount) {
          _this.setState({
            barYTop: newBarYTop
          });
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "resizeScrollBarXPosition", function (barX, rePosition) {
      var _this$contentRef$curr10 = _this.contentRef.current,
          scrollWidth = _this$contentRef$curr10.scrollWidth,
          scrollLeft = _this$contentRef$curr10.scrollLeft,
          style = _this$contentRef$curr10.style,
          clientWidth = _this$contentRef$curr10.clientWidth;
      var borderLeftWidth = parseFloat(style.borderLeftWidth);
      var scrollLeftCache = _this.scrollCache.scrollLeftCache;

      if (barX && (scrollLeft !== scrollLeftCache || rePosition)) {
        _this.scrollCache.scrollLeftCache = scrollLeft;
        var newBarXLeft = scrollLeft * clientWidth / scrollWidth + borderLeftWidth;

        if (_this.mount) {
          _this.setState({
            barXLeft: newBarXLeft
          });
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "resizeHeight", function () {
      var style = window.getComputedStyle(_this.wrappedRef.current);
      var maxHeight = style.maxHeight,
          minHeight = style.minHeight,
          maxWidth = style.maxWidth,
          minWidth = style.minWidth;
      var _this$wrappedRef$curr = _this.wrappedRef.current,
          clientHeight = _this$wrappedRef$curr.clientHeight,
          clientWidth = _this$wrappedRef$curr.clientWidth,
          offsetHeight = _this$wrappedRef$curr.offsetHeight,
          offsetWidth = _this$wrappedRef$curr.offsetWidth;
      var _this$state5 = _this.state,
          barX = _this$state5.barX,
          barY = _this$state5.barY;
      var diffHeight = offsetHeight - clientHeight;
      var diffWidth = offsetWidth - clientWidth;
      var scrollStyle = {};
      var contentStyle = {};
      var wrappedStyle = {};

      if (maxHeight !== 'none') {
        wrappedStyle.height = 'auto';
        scrollStyle.height = _this.contentRef.current.scrollHeight + (barX ? customScrollBar : 0);
        scrollStyle.maxHeight = parseFloat(maxHeight) - diffHeight;
        contentStyle.maxHeight = parseFloat(maxHeight) - diffHeight + diffScrollBar;
      }

      if (minHeight !== '0px') {
        scrollStyle.minHeight = parseFloat(minHeight) - diffHeight;
        contentStyle.minHeight = parseFloat(minHeight) - diffHeight + diffScrollBar;
      }

      if (maxWidth !== 'none') {
        scrollStyle.width = _this.contentRef.current.scrollWidth + (barY ? customScrollBar : 0);
        scrollStyle.maxWidth = parseFloat(maxWidth) - diffWidth;
        contentStyle.maxWidth = parseFloat(maxWidth) - diffWidth + diffScrollBar;
      }

      if (minWidth !== '0px') {
        scrollStyle.minWidth = parseFloat(minWidth) - diffWidth;
        contentStyle.minWidth = parseFloat(minWidth) - diffWidth + diffScrollBar;
      }

      _this.setState({
        scrollStyle: scrollStyle,
        contentStyle: contentStyle,
        wrappedStyle: wrappedStyle
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "resize", function () {
      _this.resizeHeight();

      _this.resizeScrollBarX();

      _this.resizeScrollBarY();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "mount", false);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "resizeWithTime", function () {
      if (_this.mount) {
        _this.resize();

        setTimeout(_this.resizeWithTime, 10);
      }
    });

    _this.contentRef = React.createRef();
    _this.wrappedRef = React.createRef();
    _this.scrollRef = React.createRef();
    _this.state = {
      bar: true,
      mouseDownBarY: undefined,
      mouseDownBarX: undefined,
      barX: false,
      barY: false,
      barYHeight: 0,
      barYBackgroundHeight: 0,
      barXWidth: 0,
      barXBackgroundWidth: 0,
      barYTop: 0,
      barXTop: 0,
      barYLeft: 0,
      barXLeft: 0,
      barYBackgroundTop: 0,
      barXBackgroundLeft: 0,
      barYBackgroundLeft: 0,
      scrollStyle: {},
      contentStyle: {},
      wrappedStyle: {},
      overflowY: props.overflowY === undefined ? true : props.overflowY,
      overflowX: props.overflowX === undefined ? true : props.overflowX
    };
    return _this;
  }

  var _proto = Index.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.mount = true;
    this.resizeWithTime();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mount = false;
  };

  _proto.render = function render() {
    var _this$state6 = this.state,
        bar = _this$state6.bar,
        barYTop = _this$state6.barYTop,
        barYLeft = _this$state6.barYLeft,
        barYHeight = _this$state6.barYHeight,
        barXLeft = _this$state6.barXLeft,
        barXWidth = _this$state6.barXWidth,
        barX = _this$state6.barX,
        barY = _this$state6.barY,
        barXTop = _this$state6.barXTop,
        barYBackgroundHeight = _this$state6.barYBackgroundHeight,
        barXBackgroundLeft = _this$state6.barXBackgroundLeft,
        barYBackgroundTop = _this$state6.barYBackgroundTop,
        barYBackgroundLeft = _this$state6.barYBackgroundLeft,
        barXBackgroundTop = _this$state6.barXBackgroundTop,
        barXBackgroundWidth = _this$state6.barXBackgroundWidth,
        scrollStyle = _this$state6.scrollStyle,
        contentStyle = _this$state6.contentStyle,
        wrappedStyle = _this$state6.wrappedStyle,
        overflowX = _this$state6.overflowX,
        overflowY = _this$state6.overflowY;
    var _this$props = this.props,
        style = _this$props.style,
        className = _this$props.className,
        children = _this$props.children,
        backgroundColor = _this$props.backgroundColor;
    var stylePrefix = 'rj-custom-scroll';
    return React.createElement("div", {
      className: className,
      style: _objectSpread({}, style, wrappedStyle),
      ref: this.wrappedRef
    }, React.createElement("div", {
      style: _objectSpread({
        width: '100%',
        height: '100%',
        overflow: 'hidden'
      }, scrollStyle),
      ref: this.scrollRef
    }, React.createElement("div", {
      key: stylePrefix + '-1',
      style: _objectSpread({
        borderWidth: '0',
        backgroundColor: backgroundColor,
        width: barY ? 'calc(100% + ' + diffScrollBar + 'px)' : '100%',
        height: barX ? 'calc(100% + ' + diffScrollBar + 'px)' : '100%'
      }, contentStyle, {
        overflowX: overflowX ? 'auto' : 'hidden',
        overflowY: overflowY ? 'auto' : 'hidden'
      }),
      className: stylePrefix,
      ref: this.contentRef,
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave
    }, children), barY && React.createElement("div", {
      key: stylePrefix + '-y-1',
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      onMouseDown: this.mouseDownBarY,
      onMouseUp: this.mouseUpBarY,
      onMouseMove: this.moveY,
      style: {
        marginTop: barYTop,
        height: barYHeight,
        marginLeft: barYLeft,
        width: customScrollBar,
        zIndex: '2'
      },
      className: classnames(stylePrefix + '-bar', bar ? stylePrefix + '-bar-show' : stylePrefix + '-bar-hidden')
    }), barY && React.createElement("div", {
      key: stylePrefix + '-y-2',
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      style: {
        height: barYBackgroundHeight,
        marginTop: barYBackgroundTop,
        marginLeft: barYBackgroundLeft,
        width: customScrollBar,
        backgroundColor: backgroundColor || '#FFFFFF',
        zIndex: '1'
      },
      className: stylePrefix + '-bar'
    }), barX && React.createElement("div", {
      key: stylePrefix + '-x-1',
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      onMouseDown: this.mouseDownBarX,
      onMouseUp: this.mouseUpBarX,
      onMouseMove: this.moveX,
      style: {
        marginTop: barXTop,
        marginLeft: barXLeft,
        width: barXWidth,
        height: customScrollBar,
        zIndex: '2'
      },
      className: classnames(stylePrefix + '-bar', bar ? stylePrefix + '-bar-show' : stylePrefix + '-bar-hidden')
    }), barX && React.createElement("div", {
      key: stylePrefix + '-x-2',
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      style: {
        marginTop: barXBackgroundTop,
        marginLeft: barXBackgroundLeft,
        width: barXBackgroundWidth,
        height: customScrollBar,
        backgroundColor: backgroundColor || '#FFFFFF',
        zIndex: '1'
      },
      className: stylePrefix + '-bar'
    })));
  };

  return Index;
}(Component);

Index.propTypes = {
  className: PropTypes.any,
  style: PropTypes.any,
  children: PropTypes.any,
  backgroundColor: PropTypes.string,
  overflowY: PropTypes.bool,
  overflowX: PropTypes.bool
};
export default Index;
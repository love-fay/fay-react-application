import { createStore, applyMiddleware, compose } from 'redux';
import { createLogger } from 'redux-logger';
var logger = createLogger();
import { connectRouter, routerMiddleware } from 'connected-react-router';
import createHistory from 'history/createBrowserHistory';
import createSagaMiddleware from 'redux-saga';
var history = createHistory();
var rMiddleware = routerMiddleware(history);
var win = window;
export var sagaMiddleware = createSagaMiddleware();
var middlewares = [rMiddleware, sagaMiddleware];

if (process.env.NODE_ENV !== 'production') {
  middlewares.push(require('redux-immutable-state-invariant').default());
}

var storeEnhancers = compose(applyMiddleware.apply(void 0, middlewares.concat([logger])), win && win.devToolsExtension ? win.devToolsExtension() : function (f) {
  return f;
});
import createReducer from './reducers';
export function injectAsyncStore(store, asyncReducers, sagas) {
  asyncReducers && injectAsyncReducers(store, asyncReducers);
  sagas && injectAsyncSagas(store, sagas);
}

function injectAsyncReducers(store, asyncReducers) {
  var flag = false;

  for (var key in asyncReducers) {
    if (Object.prototype.hasOwnProperty.call(asyncReducers, key)) {
      if (!store.asyncReducers[key]) {
        store.asyncReducers[key] = asyncReducers[key];
        flag = true;
      }
    }
  }

  flag && store.replaceReducer(createReducer(store.asyncReducers));
}

function injectAsyncSagas(store, sagas) {
  for (var key in sagas) {
    if (Object.prototype.hasOwnProperty.call(sagas, key)) {
      if (!store.asyncSagas[key]) {
        store.asyncSagas[key] = sagas[key];
        store.sagaMiddleware.run(sagas[key]);
      }
    }
  }
}

export function rejectAsyncStore(store, asyncReducers) {
  asyncReducers && rejectAsyncReducers(store, asyncReducers);
}

function rejectAsyncReducers(store, asyncReducers) {
  var flag = false;

  for (var key in asyncReducers) {
    if (Object.prototype.hasOwnProperty.call(asyncReducers, key)) {
      if (store.asyncReducers[key]) {
        delete store.asyncReducers[key];
        flag = true;
      }
    }
  }

  flag && store.replaceReducer(createReducer(store.asyncReducers));
}

export default function initStore() {
  var store = createStore(createReducer(), {}, storeEnhancers);
  store.asyncReducers = {};
  store.asyncSagas = {};
  store.sagaMiddleware = sagaMiddleware;
  return store;
}